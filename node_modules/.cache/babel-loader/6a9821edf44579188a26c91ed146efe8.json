{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD6qsgQajHMkwS9ZgLrrvjBchc4ReDCpKM\",\n  authDomain: \"brady-9a097.firebaseapp.com\",\n  projectId: \"brady-9a097\",\n  storageBucket: \"brady-9a097.appspot.com\",\n  messagingSenderId: \"80307267436\",\n  appId: \"1:80307267436:web:6d5687491c6511bcb17549\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst provider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider).then(() => {\n    window.location.href = '/about';\n  });\n};\nexport const signUpWithGoogle = async () => {\n  const {\n    user\n  } = auth.signInWithPopup(provider).then(async result => {\n    /** @type {firebase.auth.OAuthCredential} */\n    let user = result.user;\n    let username = result.user.displayName;\n    let email = result.user.email; // console.log(user.uid)\n    // console.log(user.email)\n    // console.log(user.displayName)\n    // console.log(credential)\n\n    console.log(email);\n    console.log(username);\n    console.log(user.uid);\n    const userRef = firestore.doc(`users/${user.uid}`);\n    console.log();\n    const snapshot = await userRef.add({\n      email,\n      username\n    });\n  }).catch(error => {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message;\n    var email = error.email;\n    var credential = error.credential;\n  });\n};\nexport const generateUserDocument = async (user, additionalData) => {\n  if (!user) return;\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      email,\n      username\n    } = user;\n\n    try {\n      await userRef.set({ ...additionalData\n      });\n    } catch (error) {\n      console.error(\"Error creating user document\", error);\n    }\n  }\n\n  return getUserDocument(user.uid);\n};\n\nconst getUserDocument = async uid => {\n  if (!uid) return null;\n\n  try {\n    const userDocument = await firestore.doc(`users/${uid}`).get();\n    return {\n      uid,\n      ...userDocument.data()\n    };\n  } catch (error) {\n    console.error(\"Error fetching user\", error);\n  }\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport default firebase;","map":{"version":3,"sources":["/Volumes/EX-DRIVE/Code_HW/SSprojects/movieCritic/src/firebase/firebase.util.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initializeApp","provider","auth","GoogleAuthProvider","signInWithGoogle","signInWithPopup","then","window","location","href","signUpWithGoogle","user","result","username","displayName","email","console","log","uid","userRef","firestore","doc","snapshot","add","catch","error","errorCode","code","errorMessage","message","credential","generateUserDocument","additionalData","get","exists","set","getUserDocument","userDocument","data"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD6qsgQajHMkwS9ZgLrrvjBchc4ReDCpKM\",\n  authDomain: \"brady-9a097.firebaseapp.com\",\n  projectId: \"brady-9a097\",\n  storageBucket: \"brady-9a097.appspot.com\",\n  messagingSenderId: \"80307267436\",\n  appId: \"1:80307267436:web:6d5687491c6511bcb17549\"\n};\n\n\nfirebase.initializeApp(firebaseConfig);\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider).then(()=>{window.location.href = '/about'});\n};\n\nexport const signUpWithGoogle = async () => {\n  const {user} = auth.signInWithPopup(provider).then( async (result) => {\n    /** @type {firebase.auth.OAuthCredential} */\n    let user= result.user;\n    let username = result.user.displayName;\n    let email = result.user.email;\n    // console.log(user.uid)\n    // console.log(user.email)\n    // console.log(user.displayName)\n    // console.log(credential)\n    console.log(email)\n    console.log(username)\n    console.log(user.uid)\n    const userRef = firestore.doc(`users/${user.uid}`);\n    console.log()\n    const snapshot = await userRef.add({email, username});\n  }).catch((error) => {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message;\n    var email = error.email;\n    var credential = error.credential;\n  });\n};\n\n\nexport const generateUserDocument = async (user, additionalData) => {\n  if (!user) return;\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapshot = await userRef.get();\n  if (!snapshot.exists) {\n    const { email, username } = user;\n    try {\n      await userRef.set({\n        ...additionalData\n      });\n    } catch (error) {\n      console.error(\"Error creating user document\", error);\n    }\n  }\n  return getUserDocument(user.uid);\n};\nconst getUserDocument = async uid => {\n  if (!uid) return null;\n  try {\n    const userDocument = await firestore.doc(`users/${uid}`).get();\n    return {\n      uid,\n      ...userDocument.data()\n    };\n  } catch (error) {\n    console.error(\"Error fetching user\", error);\n  }\n};\n\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}